# defaults: &defaults
#   working_directory: ~/online-consulting-frontend
#   docker:
#     - image: circleci/node

# deploy_image: &deploy_image
#   docker:
#     - image: circleci/python:3.7

# cypress: &cypress
#     working_directory: ~/online-consulting-frontend
#     docker:
#       - image: circleci/ruby:2.6.3-node
#         environment:
#           PG_USER: online-consulting-backend
#           RAILS_ENV: test

#       - image: circleci/postgres:10-alpine
#         environment:
#           POSTGRES_USER: online-consulting-backend
#           POSTGRES_DB: online-consulting-backend_test
#           POSTGRES_PASSWORD: ""

# caches:
#   - &deploy_dependencies_cache online-consulting-frontend-{{ checksum "deploy/dependencies.txt" }}
#   - &bundle_cache online-consulting-backend-{{ checksum "~/online-consulting-backend/Gemfile.lock" }}
#   - &yarn_cache online-consulting-frontend-v1{{ checksum "yarn.lock" }}

# references:
#   restore_yarn_cache: &restore_yarn_cache
#     restore_cache:
#       keys:
#         - *yarn_cache

#   yarn_install: &yarn_install
#     run:
#         name: Installing packages
#         command: yarn install

#   save_yarn_cache: &save_yarn_cache
#     save_cache:
#       name: Save Yarn Package Cache
#       key: *yarn_cache
#       paths:
#         - ~/.cache

#   deploy: &deploy
#     run:
#       name: Deploy
#       command: deploy/staging.sh

#   restore_deploy_dependencies_cache: &restore_deploy_dependencies_cache
#     restore_cache:
#         name: Restore deploy dependencies
#         keys:
#           - *deploy_dependencies_cache

#   store_deploy_dependencies_cache: &store_deploy_dependencies_cache
#     save_cache:
#       name: Store deploy dependencies
#       key: *deploy_dependencies_cache
#       paths:
#         - venv

#   install_ecs_cli: &install_ecs_cli
#     run:
#       name: Install ECS CLI
#       command: |
#         curl -o ~/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
#         chmod +x ~/ecs-cli
#         sudo mv ~/ecs-cli /usr/local/bin/ecs-cli

# version: 2

# jobs:
#   linters:
#     <<: *defaults

#     steps:
#       - checkout

#       - <<: *restore_yarn_cache
#       - <<: *yarn_install
#       - <<: *save_yarn_cache

#       - run:
#           name: Running linters
#           command: yarn lint

#   tests:
#     <<: *defaults

#     steps:
#       - checkout

#       - <<: *restore_yarn_cache
#       - <<: *yarn_install
#       - <<: *save_yarn_cache

#       - run:
#           name: Running tests
#           command: yarn test:circle

#       - store_artifacts:
#           name: Saving Jest coverage
#           path: ~/online-consulting-frontend/coverage/lcov-report
#           destination: /jest-coverage

#   cypress:
#     <<: *cypress
#     steps:
#       - checkout

#       - run:
#           name: Installing dependencies
#           command: |
#             sudo apt update
#             sudo apt-get install cmake xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2

#       - <<: *restore_yarn_cache
#       - <<: *yarn_install
#       - <<: *save_yarn_cache

#       - run:
#           name: Cloning backend repository
#           command: git clone -b develop git@github.com:rubygarage/online-consulting-backend.git ~/online-consulting-backend

#       - restore_cache:
#           keys:
#             - *bundle_cache

#       - run:
#           name: Installing gems
#           working_directory: ~/online-consulting-backend
#           command: bundle install --path vendor/bundle

#       - save_cache:
#           key: *bundle_cache
#           paths:
#             - ~/online-consulting-backend/vendor/bundle

#       - run:
#           name: Creating database
#           working_directory: ~/online-consulting-backend
#           command: |
#             bundle exec rails db:create
#             bundle exec rails db:schema:load

#       - run:
#           name: Starting backend server
#           working_directory: ~/online-consulting-backend
#           command: bundle exec rails s
#           background: true

#       - run:
#           name: Build frontend server
#           command: |
#             rm -rf pages/stubs
#             yarn build

#       - run:
#           name: Starting frontend server
#           command: yarn start
#           background: true

#       - run:
#           name: Waiting for frontend server
#           command: yarn wait-on http://localhost:4000/login -t 20000

#       - run:
#           name: Running cypress tests
#           command: yarn cypress run --config video=false

#       - store_artifacts:
#           name: Saving Cypress screenshots
#           path: ~/online-consulting-frontend/cypress/screenshots
#           destination: /cypress-screenshots

#   deploy:
#     <<: *deploy_image
#     steps:
#       - checkout
#       - setup_remote_docker

#       - *restore_deploy_dependencies_cache
#       - *install_ecs_cli
#       - *deploy
#       - *store_deploy_dependencies_cache
version: 2.1

executors:
  default:
    working_directory: ~/repo
    description: The official CircleCI Ruby Docker image
    docker:
      - image: circleci/ruby:2.6.1-node
        environment:
          RAILS_ENV: test
      - image: circleci/postgres:11.3-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          DATABASE_URL: "postgres://ubuntu@localhost:5432/test_db"

caches: 
  - &bundle_cache v1-repo-{{ checksum "Gemfile.lock" }}

commands:
  run_linters:
    description: command to start linters
    steps:
      - run: 
          name: rubocop
          command: bundle exec rubocop
      - run: 
          name: brakeman
          command: bundle exec brakeman -q
      - run: 
          name: lol_dba
          command: bundle exec lol_dba db:find_indexes
      - run: 
          name: rails best prctices
          command: bundle exec rails_best_practices .

  run_specs:
    steps:
      - run: 
          name: run specs
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            bundle exec rspec --format progress \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $TEST_FILES

  defaults:
    steps:
      - checkout
      - restore_cache:
          key: *bundle_cache
      - run: bundle install --path vendor/bundle
      - save_cache:
          key: *bundle_cache
          paths:
            - vendor/bundle
      - run:
          name: Set up DB
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate

jobs:
  lintering:
    executor: default
    steps:
      - defaults
      - run_linters
  run_specs:
    executor: default
    # add 'parallelism' key for run spec in parallel
    # note: don`t use parallel if your specs last less than 5 minutes
    steps:
      - defaults
      - run_specs

workflows:
  version: 2
  build:
    jobs:
      - linters
      - tests
      - cypress:
          requires:
            - linters
            - tests
      - deploy:
          requires:
            - tests
            - linters
            - cypress
          filters:
            branches:
              only: develop